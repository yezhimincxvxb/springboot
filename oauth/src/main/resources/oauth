### 应用场景
为了理解OAuth的适用场合，让我举一个假设的例子。
有一个"云冲印"的网站，可以将用户储存在Google的照片，冲印出来。用户为了使用该服务，必须让"云冲印"读取自己储存在Google上的照片。
问题是只有得到用户的授权，Google才会同意"云冲印"读取这些照片。那么，"云冲印"怎样获得用户的授权呢？
传统方法是，用户将自己的Google用户名和密码，告诉"云冲印"，后者就可以读取用户的照片了。这样的做法有以下几个严重的缺点。
（1）"云冲印"为了后续的服务，会保存用户的密码，这样很不安全。
（2）Google不得不部署密码登录，而我们知道，单纯的密码登录并不安全。
（3）"云冲印"拥有了获取用户储存在Google所有资料的权力，用户没法限制"云冲印"获得授权的范围和有效期。
（4）用户只有修改密码，才能收回赋予"云冲印"的权力。但是这样做，会使得其他所有获得用户授权的第三方应用程序全部失效。
（5）只要有一个第三方应用程序被破解，就会导致用户密码泄漏，以及所有被密码保护的数据泄漏。
OAuth就是为了解决上面这些问题而诞生的。

### 名词定义
在详细讲解OAuth 2.0之前，需要了解几个专用名词。它们对读懂后面的讲解，尤其是几张图，至关重要。
（1） Third-party application：第三方应用程序，本文中又称"客户端"（client），即上一节例子中的"云冲印"。
（2）HTTP service：HTTP服务提供商，本文中简称"服务提供商"，即上一节例子中的Google。
（3）Resource Owner：资源所有者，本文中又称"用户"（user）。
（4）User Agent：用户代理，本文中就是指浏览器。
（5）Authorization server：认证服务器，即服务提供商专门用来处理认证的服务器。
（6）Resource server：资源服务器，即服务提供商存放用户生成的资源的服务器。它与认证服务器，可以是同一台服务器，也可以是不同的服务器。
知道了上面这些名词，就不难理解，OAuth的作用就是让"客户端"安全可控地获取"用户"的授权，与"服务商提供商"进行互动。

### OAuth的思路
OAuth在"客户端"与"服务提供商"之间，设置了一个授权层（authorization layer）。"客户端"不能直接登录"服务提供商"，只能登录授权层，以此将用户与客户端区分开来。
"客户端"登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。
"客户端"登录授权层以后，"服务提供商"根据令牌的权限范围和有效期，向"客户端"开放用户储存的资料。

### 运行流程图

### 客户端的授权模式
客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式。
    授权码模式（authorization_code）
    简化模式（implicit）(不推荐使用)
    密码模式（password）
    客户端模式（client_credentials）

----------------------------------------------------------------------------------------------------------------------------
### 授权码模式
授权码模式图
下面是上面这些步骤所需要的参数。
A步骤中，客户端申请认证的URI，包含以下参数：
    response_type：表示授权类型，必选项，此处的值固定为"code"
    client_id：表示客户端的ID，必选项
    redirect_uri：表示重定向URI，可选项
    scope：表示申请的权限范围，可选项
    state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。
eg:
    http://localhost:8080/oauth/authorize?client_id=authCode&response_type=code

C步骤中，服务器回应客户端的URI，包含以下参数：
    code：表示授权码，必选项。该码的有效期应该很短，通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。该码与客户端ID和重定向URI，是一一对应关系。
    state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。
eg:
    http://localhost:8080/qq/code/redirect?code=spSQJC

D步骤中，客户端向认证服务器申请令牌的HTTP请求，包含以下参数：
    grant_type：表示使用的授权模式，必选项，此处的值固定为"authorization_code"。
    code：表示上一步获得的授权码，必选项。
    redirect_uri：表示重定向URI，必选项，且必须与A步骤中的该参数值保持一致。
    client_id：表示客户端ID，必选项。
eg:
    http://localhost:8080/oauth/token?client_id=authCode&client_secret=123456&grant_type=authorization_code&code=spSQJC

E步骤中，认证服务器发送的HTTP回复，包含以下参数：
    access_token：表示访问令牌，必选项。
    token_type：表示令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型。
    expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。
    refresh_token：表示更新令牌，用来获取下一次的访问令牌，可选项。
    scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。
eg:
{
    "access_token":"e69d8c68-fe03-4bbe-a914-d1c008edc0eb",
    "token_type":"bearer",
    "refresh_token":"89026ed8-28ad-42db-a87c-7eac189a2237",
    "expires_in":43199,
    "scope":"get_user_info get_fans_list"
}

----------------------------------------------------------------------------------------------------------------------------
### 密码模式
密码模式图
B步骤中，客户端发出的HTTP请求，包含以下参数：
    grant_type：表示授权类型，此处的值固定为"password"，必选项。
    username：表示用户名，必选项。
    password：表示用户的密码，必选项。
    scope：表示权限范围，可选项。
eg：
    http://localhost:8080/oauth/token?grant_type=password&username=admin&password=123456&scope=select
    &client_id=client_2&client_secret=123456
C步骤中，认证服务器向客户端发送访问令牌：
eg:
{
    "access_token": "61fa6738-5412-4e0d-beb2-3c418a4e7184",
    "token_type": "bearer",
    "refresh_token": "c70dbea6-8c6f-42ec-9d6f-de78f5014225",
    "expires_in": 43199,
    "scope": "select"
}
----------------------------------------------------------------------------------------------------------------------------
#### 客户端模式
客户端模式图
A步骤中，客户端发出的HTTP请求，包含以下参数：
    grant_type：表示授权类型，此处的值固定为"client_credentials"，必选项。
    scope：表示权限范围，可选项
eg：
    http://localhost:8080/oauth/token?client_id=oauth_client&client_secret=123456&grant_type=client_credentials
B步骤中，认证服务器向客户端发送访问令牌：
eg:
{
    "access_token": "042568e4-d050-44d4-9ba8-e95a9e017727",
    "token_type": "bearer",
    "expires_in": 43200,
    "scope": "select"
}
----------------------------------------------------------------------------------------------------------------------------
### 简化模式
A步骤中，客户端发出的HTTP请求，包含以下参数：
    response_type：表示授权类型，此处的值固定为"token"，必选项。
    client_id：表示客户端的ID，必选项。
    redirect_uri：表示重定向的URI，可选项。如果 client_id 对应的 Client 未配置 redirectUris 属性，会报错
    scope：表示权限范围，可选项。
    state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。
eg:
  http://localhost:8080/oauth/authorize?client_id=easy&response_type=token

C步骤中，认证服务器回应客户端的URI，包含以下参数：
    access_token：表示访问令牌，必选项。
    token_type：表示令牌类型，该值大小写不敏感，必选项。
    expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。
    scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。
    state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。
地址栏：http://localhost:8080/qq/easy/redirect#access_token=269907bc-de39-4713-b6f6-86da0e339084&token_type=bearer&expires_in=43199&scope=get_user_info